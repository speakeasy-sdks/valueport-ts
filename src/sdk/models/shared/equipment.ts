/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ContractsIdOnly } from "./contractsidonly";
import { CustomersIdOnly } from "./customersidonly";
import { TenantsIdOnly } from "./tenantsidonly";
import { Expose, Transform, Type } from "class-transformer";

export class Equipment extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "contract" })
    @Type(() => ContractsIdOnly)
    contract?: ContractsIdOnly;

    @SpeakeasyMetadata()
    @Expose({ name: "customer" })
    @Type(() => CustomersIdOnly)
    customer?: CustomersIdOnly;

    /**
     * JSON object of data.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "data" })
    data: Record<string, any>;

    /**
     * Soft-delete timestamp.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "deleted_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    deletedAt?: Date;

    /**
     * Equipment ID.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: string;

    /**
     * Display name.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name: string;

    /**
     * The remote identifier, eg. equipment serial number or IoT provisioned ID.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "remote_id" })
    remoteId: string;

    @SpeakeasyMetadata()
    @Expose({ name: "tenant" })
    @Type(() => TenantsIdOnly)
    tenant?: TenantsIdOnly;

    /**
     * Last updated timestamp.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "updated_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    updatedAt?: Date;
}
